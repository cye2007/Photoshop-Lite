/* =========================================================
 * ====                   WARNING                        ===
 * =========================================================
 * The code in this tab has been generated from the GUI form
 * designer and care should be taken when editing this file.
 * Only add/edit code inside the event handlers i.e. only
 * use lines between the matching comment tags. e.g.

 void myBtnEvents(GButton button) { //_CODE_:button1:12356:
     // It is safe to enter your event code here  
 } //_CODE_:button1:12356:
 
 * Do not rename this tab!
 * =========================================================
 */

public void applicationPanelPressed(GPanel source, GEvent event) { //_CODE_:applicationPanel:808074:
  println("panel1 - GPanel >> GEvent." + event + " @ " + millis());
} //_CODE_:applicationPanel:808074:

public void saveButtonPressed(GButton source, GEvent event) { //_CODE_:saveButton:873202:
  println("saveButton - GButton >> GEvent." + event + " @ " + millis());
  canvas.saveCanvas();
} //_CODE_:saveButton:873202:

public void toolPanelPressed(GPanel source, GEvent event) { //_CODE_:toolPanel:330345:
  println("toolPanel - GPanel >> GEvent." + event + " @ " + millis());
} //_CODE_:toolPanel:330345:

public void zoomButtonPressed(GButton source, GEvent event) { //_CODE_:zoomButton:746164:
  println("button1 - GButton >> GEvent." + event + " @ " + millis());
  currentTool = zoom;
} //_CODE_:zoomButton:746164:

public void brushButtonPressed(GButton source, GEvent event) { //_CODE_:brushButton:681834:
  println("brushButton - GButton >> GEvent." + event + " @ " + millis());
  currentTool = brush;
} //_CODE_:brushButton:681834:

public void eraseButtonPressed(GButton source, GEvent event) { //_CODE_:eraseButton:768440:
  println("eraseButton - GButton >> GEvent." + event + " @ " + millis());
  currentTool = erase;
  G4P.selectColor();
} //_CODE_:eraseButton:768440:

public void fillButtonPressed(GButton source, GEvent event) { //_CODE_:fillButton:563538:
  println("fillButton - GButton >> GEvent." + event + " @ " + millis());
  currentTool = fill;
} //_CODE_:fillButton:563538:

public void colorPickerButtonPressed(GButton source, GEvent event) { //_CODE_:colorPickerButton:526776:
  println("colorPickerButton - GButton >> GEvent." + event + " @ " + millis());
} //_CODE_:colorPickerButton:526776:

public void photoshopPanelsPressed(GPanel source, GEvent event) { //_CODE_:photoshopPanels:209891:
  println("panel1 - GPanel >> GEvent." + event + " @ " + millis());
} //_CODE_:photoshopPanels:209891:

public void previousLayerButtonPressed(GButton source, GEvent event) { //_CODE_:previousLayerButton:877256:
  println("previousLayerButton - GButton >> GEvent." + event + " @ " + millis());
  layerIndex = (layerIndex + canvas.size() - 1) % canvas.size();
  currentLayer = canvas.getLayer(layerIndex);
  layerOpacity.setValue(canvas.getLayer(layerIndex).getOpacity());
} //_CODE_:previousLayerButton:877256:

public void nextLayerButtonPressed(GButton source, GEvent event) { //_CODE_:nextLayerButton:266297:
  println("nextLayerButton - GButton >> GEvent." + event + " @ " + millis());
  layerIndex = (layerIndex + 1) % canvas.size();
  currentLayer = canvas.getLayer(layerIndex);
  layerOpacity.setValue(canvas.getLayer(layerIndex).getOpacity());
} //_CODE_:nextLayerButton:266297:

public void addLayerButtonPressed(GButton source, GEvent event) { //_CODE_:addLayerButton:215204:
  println("button1 - GButton >> GEvent." + event + " @ " + millis());
  canvas.addLayer(layerIndex + 1);
  layerIndex++;
  currentLayer = canvas.getLayer(layerIndex);
} //_CODE_:addLayerButton:215204:

public void removeLayerButtonPressed(GButton source, GEvent event) { //_CODE_:removeLayerButton:679056:
  println("button1 - GButton >> GEvent." + event + " @ " + millis());
  canvas.removeLayer(layerIndex);
  layerIndex = Math.min(layerIndex, canvas.size() - 1);
} //_CODE_:removeLayerButton:679056:

public void layerOpacityChanged(GCustomSlider source, GEvent event) { //_CODE_:layerOpacity:549092:
  println("layerOpacity - GCustomSlider >> GEvent." + event + " @ " + millis());
  canvas.getLayer(layerIndex).setOpacity(layerOpacity.getValueF());
} //_CODE_:layerOpacity:549092:



// Create all the GUI controls. 
// autogenerated do not edit
public void createGUI(){
  G4P.messagesEnabled(false);
  G4P.setGlobalColorScheme(GCScheme.BLUE_SCHEME);
  G4P.setMouseOverEnabled(false);
  GButton.useRoundCorners(false);
  G4P.setSliderFont(".AppleSystemUIFont", G4P.PLAIN, 11);
  surface.setTitle("Photoshop");
  applicationPanel = new GPanel(this, 0, 0, 1440, 60, "Application Bar");
  applicationPanel.setCollapsible(false);
  applicationPanel.setDraggable(false);
  applicationPanel.setText("Application Bar");
  applicationPanel.setOpaque(true);
  applicationPanel.addEventHandler(this, "applicationPanelPressed");
  saveButton = new GButton(this, 0, 20, 40, 40);
  saveButton.setText("Save");
  saveButton.setLocalColorScheme(GCScheme.CYAN_SCHEME);
  saveButton.addEventHandler(this, "saveButtonPressed");
  applicationPanel.addControl(saveButton);
  toolPanel = new GPanel(this, 0, 60, 80, 860, "Tools");
  toolPanel.setCollapsible(false);
  toolPanel.setDraggable(false);
  toolPanel.setText("Tools");
  toolPanel.setOpaque(true);
  toolPanel.addEventHandler(this, "toolPanelPressed");
  zoomButton = new GButton(this, 0, 100, 40, 40);
  zoomButton.setText("Zoom");
  zoomButton.setLocalColorScheme(GCScheme.CYAN_SCHEME);
  zoomButton.addEventHandler(this, "zoomButtonPressed");
  brushButton = new GButton(this, 40, 20, 40, 40);
  brushButton.setText("Brush");
  brushButton.setLocalColorScheme(GCScheme.CYAN_SCHEME);
  brushButton.addEventHandler(this, "brushButtonPressed");
  eraseButton = new GButton(this, 0, 60, 40, 40);
  eraseButton.setText("Erase");
  eraseButton.setLocalColorScheme(GCScheme.CYAN_SCHEME);
  eraseButton.addEventHandler(this, "eraseButtonPressed");
  fillButton = new GButton(this, 40, 60, 40, 40);
  fillButton.setText("Fill");
  fillButton.setLocalColorScheme(GCScheme.CYAN_SCHEME);
  fillButton.addEventHandler(this, "fillButtonPressed");
  colorPickerButton = new GButton(this, 0, 20, 40, 40);
  colorPickerButton.setText("Color Picker");
  colorPickerButton.setLocalColorScheme(GCScheme.CYAN_SCHEME);
  colorPickerButton.addEventHandler(this, "colorPickerButtonPressed");
  toolPanel.addControl(zoomButton);
  toolPanel.addControl(brushButton);
  toolPanel.addControl(eraseButton);
  toolPanel.addControl(fillButton);
  toolPanel.addControl(colorPickerButton);
  photoshopPanels = new GPanel(this, 1160, 60, 280, 860, "Panels");
  photoshopPanels.setCollapsible(false);
  photoshopPanels.setDraggable(false);
  photoshopPanels.setText("Panels");
  photoshopPanels.setOpaque(true);
  photoshopPanels.addEventHandler(this, "photoshopPanelsPressed");
  previousLayerButton = new GButton(this, 0, 20, 140, 40);
  previousLayerButton.setText("Previous Layer");
  previousLayerButton.setLocalColorScheme(GCScheme.CYAN_SCHEME);
  previousLayerButton.addEventHandler(this, "previousLayerButtonPressed");
  nextLayerButton = new GButton(this, 140, 20, 140, 40);
  nextLayerButton.setText("Next Layer");
  nextLayerButton.setLocalColorScheme(GCScheme.CYAN_SCHEME);
  nextLayerButton.addEventHandler(this, "nextLayerButtonPressed");
  addLayerButton = new GButton(this, 0, 60, 140, 40);
  addLayerButton.setText("Add Layer");
  addLayerButton.setLocalColorScheme(GCScheme.CYAN_SCHEME);
  addLayerButton.addEventHandler(this, "addLayerButtonPressed");
  removeLayerButton = new GButton(this, 140, 60, 140, 40);
  removeLayerButton.setText("Remove Layer");
  removeLayerButton.setLocalColorScheme(GCScheme.CYAN_SCHEME);
  removeLayerButton.addEventHandler(this, "removeLayerButtonPressed");
  layerOpacity = new GCustomSlider(this, 0, 120, 280, 40, "grey_blue");
  layerOpacity.setShowValue(true);
  layerOpacity.setShowLimits(true);
  layerOpacity.setLimits(1.0, 0.0, 1.0);
  layerOpacity.setNbrTicks(100);
  layerOpacity.setNumberFormat(G4P.DECIMAL, 2);
  layerOpacity.setOpaque(false);
  layerOpacity.addEventHandler(this, "layerOpacityChanged");
  layerOpacityLabel = new GLabel(this, 0, 100, 80, 20);
  layerOpacityLabel.setText("Layer Opacity");
  layerOpacityLabel.setOpaque(false);
  photoshopPanels.addControl(previousLayerButton);
  photoshopPanels.addControl(nextLayerButton);
  photoshopPanels.addControl(addLayerButton);
  photoshopPanels.addControl(removeLayerButton);
  photoshopPanels.addControl(layerOpacity);
  photoshopPanels.addControl(layerOpacityLabel);
}

// Variable declarations 
// autogenerated do not edit
GPanel applicationPanel; 
GButton saveButton; 
GPanel toolPanel; 
GButton zoomButton; 
GButton brushButton; 
GButton eraseButton; 
GButton fillButton; 
GButton colorPickerButton; 
GPanel photoshopPanels; 
GButton previousLayerButton; 
GButton nextLayerButton; 
GButton addLayerButton; 
GButton removeLayerButton; 
GCustomSlider layerOpacity; 
GLabel layerOpacityLabel; 
